{"ast":null,"code":"import _classCallCheck from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/powers_rc/MyProjects/dQA/client/src/js/WorkHistory.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nexport var WorkHistory = /*#__PURE__*/function (_Component) {\n  _inherits(WorkHistory, _Component);\n\n  var _super = _createSuper(WorkHistory);\n\n  function WorkHistory() {\n    _classCallCheck(this, WorkHistory);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(WorkHistory, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Create the observer\n      var observer = new IntersectionObserver(function (entries) {\n        // Loop over the entries\n        entries.forEach(function (entry) {\n          // If the element is visible\n          if (entry.isIntersecting && entry.target.classList.contains('work-line-animation')) {\n            entry.target.classList.add('line-animation-left');\n          } else if (entry.isIntersecting && entry.target.classList.contains('work-text-animation')) entry.target.classList.add('typewriter-left');\n        });\n      });\n      observer.observe(document.querySelector('.intro-text-animation'));\n      observer.observe(document.querySelector('.intro-line-animation'));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"work-section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"animation-separator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"hr\", {\n        className: \"line-animation-left work-line-animation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"typewriter-left-work-history work-text-animation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 17\n        }\n      }, \"Work History\")), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return WorkHistory;\n}(Component);","map":{"version":3,"sources":["/Users/powers_rc/MyProjects/dQA/client/src/js/WorkHistory.js"],"names":["React","Component","WorkHistory","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","contains","add","observe","document","querySelector"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,6BAAmB;AACjB;AACA,UAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,UAAAC,OAAO,EAAI;AACnD;AACAA,QAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,KAAK,EAAI;AACvB;AACA,cAAIA,KAAK,CAACC,cAAN,IAAwBD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC,qBAAhC,CAA5B,EAAoF;AAClFJ,YAAAA,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBE,GAAvB,CAA2B,qBAA3B;AACD,WAFD,MAEO,IAAGL,KAAK,CAACC,cAAN,IAAwBD,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC,qBAAhC,CAA3B,EACLJ,KAAK,CAACE,MAAN,CAAaC,SAAb,CAAuBE,GAAvB,CAA2B,iBAA3B;AACH,SAND;AAOD,OATgB,CAAjB;AAWAT,MAAAA,QAAQ,CAACU,OAAT,CAAiBC,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAjB;AACAZ,MAAAA,QAAQ,CAACU,OAAT,CAAiBC,QAAQ,CAACC,aAAT,CAAuB,uBAAvB,CAAjB;AACD;AAhBL;AAAA;AAAA,WAkBE,kBAAS;AACP,0BACI;AAAK,QAAA,EAAE,EAAC,cAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAI,QAAA,SAAS,EAAC,yCAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAEI;AAAI,QAAA,SAAS,EAAC,kDAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFJ,CADJ,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CADJ;AAWD;AA9BH;;AAAA;AAAA,EAAiCd,SAAjC","sourcesContent":["import React, { Component } from 'react';\n\nexport class WorkHistory extends Component {\n    componentDidMount(){\n      // Create the observer\n      const observer = new IntersectionObserver(entries => {\n        // Loop over the entries\n        entries.forEach(entry => {\n          // If the element is visible\n          if (entry.isIntersecting && entry.target.classList.contains('work-line-animation')) {\n            entry.target.classList.add('line-animation-left');\n          } else if(entry.isIntersecting && entry.target.classList.contains('work-text-animation'))\n            entry.target.classList.add('typewriter-left');\n        });\n      });\n\n      observer.observe(document.querySelector('.intro-text-animation'));\n      observer.observe(document.querySelector('.intro-line-animation'));\n    }\n\n  render() {\n    return (\n        <div id=\"work-section\">\n            <div className=\"animation-separator\">\n                <hr className=\"line-animation-left work-line-animation\"/>\n                <h2 className=\"typewriter-left-work-history work-text-animation\">Work History</h2>\n            </div>\n          <div>\n\n          </div>\n        </div>\n    );\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}