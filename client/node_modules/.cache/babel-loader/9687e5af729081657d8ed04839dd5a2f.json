{"ast":null,"code":"import _classCallCheck from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/powers_rc/MyProjects/dQA/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/powers_rc/MyProjects/dQA/client/src/js/WorkHistory.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport { GoldenWestJob } from './jobs/GoldenWestJob';\nimport { XentityJob } from './jobs/XentityJob';\nexport var WorkHistory = /*#__PURE__*/function (_Component) {\n  _inherits(WorkHistory, _Component);\n\n  var _super = _createSuper(WorkHistory);\n\n  function WorkHistory(props) {\n    var _this;\n\n    _classCallCheck(this, WorkHistory);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(WorkHistory, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Create the observer\n      var observer = new IntersectionObserver(function (entries) {\n        // Loop over the entries\n        entries.forEach(function (entry) {\n          // If the element is visible\n          if (entry.isIntersecting && entry.target.classList.contains('work-line-animation')) {\n            //Update url to work history section\n            var pageState = document.getElementById(\"work-section\").innerHTML,\n                title = \"Work Page\",\n                urlPath = window.location.href;\n            var newUrlPath = urlPath.split(\"#\")[0] + \"#work-section\";\n            window.history.pushState({\n              \"html\": pageState\n            }, title, newUrlPath);\n            entry.target.classList.add('line-animation-left');\n          } else if (entry.isIntersecting && entry.target.classList.contains('work-text-animation')) entry.target.classList.add('typewriter-left');\n        });\n      });\n      observer.observe(document.querySelector('.work-line-animation'));\n      observer.observe(document.querySelector('.work-text-animation'));\n    }\n  }, {\n    key: \"handleJobClick\",\n    value: function handleJobClick(value) {\n      console.log(value);\n      this.setState({\n        selectedJob: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var selectedJob = this.state.selectedJob;\n      var jobContent;\n\n      if (selectedJob === \"GWIS\") {\n        jobContent = /*#__PURE__*/React.createElement(GoldenWestJob, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 20\n          }\n        });\n      } else if (selectedJob === \"CDOT\") {\n        jobContent = /*#__PURE__*/React.createElement(XentityJob, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 20\n          }\n        });\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"work-section\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"animation-responsive-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"work-line-animation animation-responsive-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"animation-responsive-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h2\", {\n        className: \"work-text-animation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }\n      }, \"Work History\"))), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"work-history\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"work-radio-selection\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"work-buttons current-position\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        id: \"gwis\",\n        name: \"jobs\",\n        value: \"GWIS\",\n        onClick: this.handleJobClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, \"Golden West Technologies\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"work-buttons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        id: \"cdot\",\n        name: \"jobs\",\n        value: \"CDOT\",\n        onClick: this.handleJobClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, \"Xentity\"))), jobContent)), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n\n  return WorkHistory;\n}(Component);","map":{"version":3,"sources":["/Users/powers_rc/MyProjects/dQA/client/src/js/WorkHistory.js"],"names":["React","Component","GoldenWestJob","XentityJob","WorkHistory","props","state","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","contains","pageState","document","getElementById","innerHTML","title","urlPath","window","location","href","newUrlPath","split","history","pushState","add","observe","querySelector","value","console","log","setState","selectedJob","jobContent","handleJobClick"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { GoldenWestJob } from './jobs/GoldenWestJob';\nimport { XentityJob } from './jobs/XentityJob';\n\nexport class WorkHistory extends Component {\n    constructor(props){\n      super(props);\n      this.state = {};\n      \n    }\n\n    componentDidMount(){\n      // Create the observer\n      const observer = new IntersectionObserver(entries => {\n        // Loop over the entries\n        entries.forEach(entry => {\n          // If the element is visible\n          if (entry.isIntersecting && entry.target.classList.contains('work-line-animation')) {\n            //Update url to work history section\n            let pageState = document.getElementById(\"work-section\").innerHTML,\n              title = \"Work Page\",\n              urlPath = window.location.href;\n\n            let newUrlPath = urlPath.split(\"#\")[0] + \"#work-section\";\n            window.history.pushState({\"html\":pageState}, title, newUrlPath);\n            entry.target.classList.add('line-animation-left');\n          } else if(entry.isIntersecting && entry.target.classList.contains('work-text-animation'))\n            entry.target.classList.add('typewriter-left');\n        });\n      });\n\n      observer.observe(document.querySelector('.work-line-animation'));\n      observer.observe(document.querySelector('.work-text-animation'));\n    }\n    \n    handleJobClick(value){\n      console.log(value);\n      this.setState({selectedJob: value});\n    }\n\n\n  render() {\n    const selectedJob = this.state.selectedJob;\n    let jobContent;\n    if(selectedJob === \"GWIS\"){\n      jobContent = <GoldenWestJob/>\n    } else if(selectedJob === \"CDOT\"){\n      jobContent = <XentityJob/>\n    }\n    return (\n        <div id=\"work-section\">\n            <div className=\"animation-responsive-container\">\n                <div className=\"work-line-animation animation-responsive-line\"></div>\n                <div className=\"animation-responsive-text\">\n                  <h2 className=\"work-text-animation\">Work History</h2>\n                </div>\n            </div>\n            <div>\n              <div className=\"work-history\">\n                <div className='work-radio-selection'>\n                  <div className=\"work-buttons current-position\">\n                    <button type=\"button\" id=\"gwis\" name=\"jobs\" value=\"GWIS\" \n                      onClick={this.handleJobClick}>Golden West Technologies</button>\n                  </div>\n                  <div className=\"work-buttons\">\n                    <button type=\"button\" id=\"cdot\" name=\"jobs\" value=\"CDOT\" \n                      onClick={this.handleJobClick}>Xentity</button>\n                  </div>\n                </div>\n                {jobContent}\n              </div>\n            </div>\n          <div>\n\n          </div>\n        </div>\n    );\n  }\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}